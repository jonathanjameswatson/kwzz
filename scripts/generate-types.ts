import { Project, Node, StructureKind } from 'ts-morph'
import openApiTS from 'openapi-typescript'
import { pascalCase } from 'scule'
import { compileFromFile } from 'json-schema-to-typescript'

import 'dotenv/config'
;(async () => {
  const project = new Project()

  const questionsInterface = await compileFromFile('public/schemas/questions', {
    ignoreMinAndMaxItems: true,
    bannerComment: `/**
 * This file was automatically generated by scripts/generate-types.ts.
 */`,
    style: {
      singleQuote: true,
    },
  })

  const databaseFile = project.createSourceFile(
    'types/database.generated.d.ts',
    questionsInterface,
    { overwrite: true }
  )

  const openApiSpec = await openApiTS(
    `${process.env.SUPABASE_URL}/rest/v1/?apikey=${process.env.SUPABASE_KEY}#definitions`
  )

  const openApiSpecFile = project.createSourceFile(
    'types/openApiSpec.generated.d.ts',
    openApiSpec,
    { overwrite: true }
  )

  const definitions = openApiSpecFile.getInterface('definitions')

  if (definitions === undefined) {
    console.error('Could not get definitions from OpenAPI spec.')
    return
  }

  definitions.forEachChild((propertySignature) => {
    if (!Node.isPropertySignature(propertySignature)) {
      return
    }

    propertySignature.forEachChild((typeLiteral) => {
      if (!Node.isTypeLiteral(typeLiteral)) {
        return
      }

      const interfaceDeclaration = databaseFile.addInterface({
        name: pascalCase(propertySignature.getName()),
        isExported: true,
        kind: StructureKind.Interface,
        properties: typeLiteral
          .getProperties()
          .map((property) => property.getStructure())
          .filter(
            (propertyStructure) => propertyStructure.name !== 'questions'
          ),
      })

      interfaceDeclaration.addProperty({
        name: 'questions',
        kind: StructureKind.PropertySignature,
        type: 'Questions',
      })
    })
  })

  databaseFile.formatText({
    indentSize: 2,
    semicolons: 'remove' as any,
  })
  await databaseFile.save()
})()
