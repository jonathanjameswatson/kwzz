import { compileFromFile } from 'json-schema-to-typescript'
import { spawnSync } from 'node:child_process'
import { writeFileSync } from 'node:fs'
import { resolve } from 'pathe'
import { format as prettify } from 'prettier'
import prettierOptions from '../.prettierrc.cjs'
import 'dotenv/config'

const bannerComment = `/**
 * This file was automatically generated by scripts/generate-types.ts.
 */`

const save = (location: string, code: string) => {
  const formattedCode = prettify(code, {
    parser: 'typescript',
    ...prettierOptions,
  })
  writeFileSync(resolve(process.cwd(), location), formattedCode, {
    encoding: 'utf-8',
  })
}

;(async () => {
  const questions = await compileFromFile('public/schemas/questions', {
    ignoreMinAndMaxItems: true,
    bannerComment,
    style: {
      singleQuote: true,
    },
  })

  save('types/questions.generated.d.ts', questions)

  if (process.env.SUPABASE_PROJECT_ID === undefined) {
    console.error('SUPABASE_PROJECT_ID is not set.')
    return
  }

  const supabaseProcess = spawnSync(
    /^win/.test(process.platform) ? 'pnpm.cmd' : 'pnpm',
    [
      'exec',
      '--',
      'supabase',
      'gen',
      'types',
      'typescript',
      '--project-id',
      process.env.SUPABASE_PROJECT_ID,
    ],
    {
      encoding: 'utf-8',
    }
  )

  if (supabaseProcess.error !== undefined) {
    throw supabaseProcess.error
  }

  const supabase = supabaseProcess.stdout.replace(
    /questions(\??): Json/g,
    'questions$1: Questions'
  )

  save(
    'types/database.generated.d.ts',
    `${bannerComment}
import { Questions } from './questions.generated'

${supabase}`
  )
})()
